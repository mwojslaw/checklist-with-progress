{"dependencies":[{"name":"../language/printer","loc":{"line":8,"column":23}},{"name":"../language/kinds","loc":{"line":10,"column":21}},{"name":"../type/definition","loc":{"line":14,"column":26}},{"name":"../jsutils/invariant","loc":{"line":16,"column":25}},{"name":"../jsutils/keyMap","loc":{"line":20,"column":22}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLiteralValue = isValidLiteralValue;\n\nvar _printer = require('../language/printer');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Utility for validators which determines if a value literal node is valid\n * given an input type.\n *\n * Note that this only validates literal values, variables are assumed to\n * provide values of the correct type.\n */\nfunction isValidLiteralValue(type, valueNode) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (!valueNode || valueNode.kind === Kind.NULL) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n    return isValidLiteralValue(type.ofType, valueNode);\n  }\n\n  if (!valueNode || valueNode.kind === Kind.NULL) {\n    return [];\n  }\n\n  // This function only tests literals, and assumes variables will provide\n  // values of the correct type.\n  if (valueNode.kind === Kind.VARIABLE) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      return valueNode.values.reduce(function (acc, item, index) {\n        var errors = isValidLiteralValue(itemType, item);\n        return acc.concat(errors.map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      }, []);\n    }\n    return isValidLiteralValue(itemType, valueNode);\n  }\n\n  // Input objects check each defined field and look for undefined fields.\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n    var fields = type.getFields();\n\n    var errors = [];\n\n    // Ensure every provided field is defined.\n    var fieldNodes = valueNode.fields;\n    fieldNodes.forEach(function (providedFieldNode) {\n      if (!fields[providedFieldNode.name.value]) {\n        errors.push('In field \"' + providedFieldNode.name.value + '\": Unknown field.');\n      }\n    });\n\n    // Ensure every defined field is valid.\n    var fieldNodeMap = (0, _keyMap2.default)(fieldNodes, function (fieldNode) {\n      return fieldNode.name.value;\n    });\n    Object.keys(fields).forEach(function (fieldName) {\n      var result = isValidLiteralValue(fields[fieldName].type, fieldNodeMap[fieldName] && fieldNodeMap[fieldName].value);\n      errors.push.apply(errors, result.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n\n    return errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  // Scalars determine if a literal values is valid.\n  if (!type.isValidLiteral(valueNode)) {\n    return ['Expected type \"' + type.name + '\", found ' + (0, _printer.print)(valueNode) + '.'];\n  }\n\n  return [];\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */","map":{"mappings":[{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/graphql/utilities/isValidLiteralValue.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}}],"sources":{"node_modules/graphql/utilities/isValidLiteralValue.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLiteralValue = isValidLiteralValue;\n\nvar _printer = require('../language/printer');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Utility for validators which determines if a value literal node is valid\n * given an input type.\n *\n * Note that this only validates literal values, variables are assumed to\n * provide values of the correct type.\n */\nfunction isValidLiteralValue(type, valueNode) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (!valueNode || valueNode.kind === Kind.NULL) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n    return isValidLiteralValue(type.ofType, valueNode);\n  }\n\n  if (!valueNode || valueNode.kind === Kind.NULL) {\n    return [];\n  }\n\n  // This function only tests literals, and assumes variables will provide\n  // values of the correct type.\n  if (valueNode.kind === Kind.VARIABLE) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      return valueNode.values.reduce(function (acc, item, index) {\n        var errors = isValidLiteralValue(itemType, item);\n        return acc.concat(errors.map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      }, []);\n    }\n    return isValidLiteralValue(itemType, valueNode);\n  }\n\n  // Input objects check each defined field and look for undefined fields.\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n    var fields = type.getFields();\n\n    var errors = [];\n\n    // Ensure every provided field is defined.\n    var fieldNodes = valueNode.fields;\n    fieldNodes.forEach(function (providedFieldNode) {\n      if (!fields[providedFieldNode.name.value]) {\n        errors.push('In field \"' + providedFieldNode.name.value + '\": Unknown field.');\n      }\n    });\n\n    // Ensure every defined field is valid.\n    var fieldNodeMap = (0, _keyMap2.default)(fieldNodes, function (fieldNode) {\n      return fieldNode.name.value;\n    });\n    Object.keys(fields).forEach(function (fieldName) {\n      var result = isValidLiteralValue(fields[fieldName].type, fieldNodeMap[fieldName] && fieldNodeMap[fieldName].value);\n      errors.push.apply(errors, result.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n\n    return errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  // Scalars determine if a literal values is valid.\n  if (!type.isValidLiteral(valueNode)) {\n    return ['Expected type \"' + type.name + '\", found ' + (0, _printer.print)(valueNode) + '.'];\n  }\n\n  return [];\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */"},"lineCount":115}},"hash":"bb42ff18cbf310dcdd26a019b75ce2ad","cacheData":{"env":{}}}