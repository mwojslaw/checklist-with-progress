{"dependencies":[{"name":"../../error","loc":{"line":9,"column":21}},{"name":"../../jsutils/find","loc":{"line":11,"column":20}},{"name":"../../language/kinds","loc":{"line":15,"column":21}},{"name":"../../language/printer","loc":{"line":19,"column":23}},{"name":"../../type/definition","loc":{"line":21,"column":26}},{"name":"../../utilities/typeFromAST","loc":{"line":23,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldsConflictMessage = fieldsConflictMessage;\nexports.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;\n\nvar _error = require('../../error');\n\nvar _find = require('../../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _kinds = require('../../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction fieldsConflictMessage(responseName, reason) {\n  return 'Fields \"' + responseName + '\" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return 'subfields \"' + responseName + '\" conflict because ' + reasonMessage(subreason);\n    }).join(' and ');\n  }\n  return reason;\n}\n\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\nfunction OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragments = new PairSet();\n\n  // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n  var cachedFieldsAndFragmentNames = new Map();\n\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, context.getParentType(), selectionSet);\n      conflicts.forEach(function (_ref2) {\n        var _ref2$ = _ref2[0],\n            responseName = _ref2$[0],\n            reason = _ref2$[1],\n            fields1 = _ref2[1],\n            fields2 = _ref2[2];\n        return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      });\n    }\n  };\n}\n// Field name and reason.\n\n// Reason is a string, or a nested list of conflicts.\n\n// Tuple defining a field node in a context.\n\n// Map of array of those.\n\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1];\n\n  // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap);\n\n  // (B) Then collect conflicts between these fields and those represented by\n  // each spread fragment name found.\n  for (var i = 0; i < fragmentNames.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fieldMap, fragmentNames[i]);\n    // (C) Then compare this fragment with all other fragments found in this\n    // selection set to collect conflicts between fragments spread together.\n    // This compares each item in the list of fragment names to every other item\n    // in that same list (except for itself).\n    for (var j = i + 1; j < fragmentNames.length; j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fragmentNames[i], fragmentNames[j]);\n    }\n  }\n  return conflicts;\n}\n\n// Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1];\n\n  // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fieldMap2);\n\n  // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n}\n\n// Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  // No need to compare a fragment to itself.\n  if (fragment1 === fragment2) {\n    return;\n  }\n\n  // Memoize so two fragments are not compared for conflicts more than once.\n  if (comparedFragments.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n  comparedFragments.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1];\n\n  // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  }\n\n  // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n}\n\n// Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1];\n\n  // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n  }\n\n  // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n  }\n\n  // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n  for (var _i = 0; _i < fragmentNames1.length; _i++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);\n    }\n  }\n  return conflicts;\n}\n\n// Collect all Conflicts \"within\" one collection of fields.\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  Object.keys(fieldMap).forEach(function (responseName) {\n    var fields = fieldMap[responseName];\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  Object.keys(fieldMap1).forEach(function (responseName) {\n    var fields2 = fieldMap2[responseName];\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2];\n\n  // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && parentType1 instanceof _definition.GraphQLObjectType && parentType2 instanceof _definition.GraphQLObjectType;\n\n  // The return type for each field.\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n    if (name1 !== name2) {\n      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];\n    }\n\n    // Two field calls must have the same arguments.\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];\n  }\n\n  // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n  return arguments1.every(function (argument1) {\n    var argument2 = (0, _find2.default)(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n    if (!argument2) {\n      return false;\n    }\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);\n}\n\n// Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\nfunction doTypesConflict(type1, type2) {\n  if (type1 instanceof _definition.GraphQLList) {\n    return type2 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type2 instanceof _definition.GraphQLList) {\n    return type1 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type1 instanceof _definition.GraphQLNonNull) {\n    return type2 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type2 instanceof _definition.GraphQLNonNull) {\n    return type1 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {\n    return type1 !== type2;\n  }\n  return false;\n}\n\n// Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n  return cached;\n}\n\n// Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        var fieldName = selection.name.value;\n        var fieldDef = void 0;\n        if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n        var responseName = selection.alias ? selection.alias.value : fieldName;\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n      case Kind.INLINE_FRAGMENT:\n        var typeCondition = selection.typeCondition;\n        var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;\n        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n        break;\n    }\n  }\n}\n\n// Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref3) {\n      var reason = _ref3[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref4) {\n      var fields1 = _ref4[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref5) {\n      var fields2 = _ref5[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\nvar PairSet = function () {\n  function PairSet() {\n    _classCallCheck(this, PairSet);\n\n    this._data = Object.create(null);\n  }\n\n  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n    if (result === undefined) {\n      return false;\n    }\n    // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n    return true;\n  };\n\n  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n  map[b] = areMutuallyExclusive;\n}","map":{"mappings":[{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}}],"sources":{"node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldsConflictMessage = fieldsConflictMessage;\nexports.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;\n\nvar _error = require('../../error');\n\nvar _find = require('../../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _kinds = require('../../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction fieldsConflictMessage(responseName, reason) {\n  return 'Fields \"' + responseName + '\" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return 'subfields \"' + responseName + '\" conflict because ' + reasonMessage(subreason);\n    }).join(' and ');\n  }\n  return reason;\n}\n\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\nfunction OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragments = new PairSet();\n\n  // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n  var cachedFieldsAndFragmentNames = new Map();\n\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, context.getParentType(), selectionSet);\n      conflicts.forEach(function (_ref2) {\n        var _ref2$ = _ref2[0],\n            responseName = _ref2$[0],\n            reason = _ref2$[1],\n            fields1 = _ref2[1],\n            fields2 = _ref2[2];\n        return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      });\n    }\n  };\n}\n// Field name and reason.\n\n// Reason is a string, or a nested list of conflicts.\n\n// Tuple defining a field node in a context.\n\n// Map of array of those.\n\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1];\n\n  // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap);\n\n  // (B) Then collect conflicts between these fields and those represented by\n  // each spread fragment name found.\n  for (var i = 0; i < fragmentNames.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fieldMap, fragmentNames[i]);\n    // (C) Then compare this fragment with all other fragments found in this\n    // selection set to collect conflicts between fragments spread together.\n    // This compares each item in the list of fragment names to every other item\n    // in that same list (except for itself).\n    for (var j = i + 1; j < fragmentNames.length; j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fragmentNames[i], fragmentNames[j]);\n    }\n  }\n  return conflicts;\n}\n\n// Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1];\n\n  // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fieldMap2);\n\n  // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n}\n\n// Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  // No need to compare a fragment to itself.\n  if (fragment1 === fragment2) {\n    return;\n  }\n\n  // Memoize so two fragments are not compared for conflicts more than once.\n  if (comparedFragments.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n  comparedFragments.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1];\n\n  // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  }\n\n  // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n}\n\n// Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1];\n\n  // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);\n\n  // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n  }\n\n  // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n  }\n\n  // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n  for (var _i = 0; _i < fragmentNames1.length; _i++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);\n    }\n  }\n  return conflicts;\n}\n\n// Collect all Conflicts \"within\" one collection of fields.\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  Object.keys(fieldMap).forEach(function (responseName) {\n    var fields = fieldMap[responseName];\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  Object.keys(fieldMap1).forEach(function (responseName) {\n    var fields2 = fieldMap2[responseName];\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  });\n}\n\n// Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2];\n\n  // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && parentType1 instanceof _definition.GraphQLObjectType && parentType2 instanceof _definition.GraphQLObjectType;\n\n  // The return type for each field.\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n    if (name1 !== name2) {\n      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];\n    }\n\n    // Two field calls must have the same arguments.\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];\n  }\n\n  // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n  return arguments1.every(function (argument1) {\n    var argument2 = (0, _find2.default)(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n    if (!argument2) {\n      return false;\n    }\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);\n}\n\n// Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\nfunction doTypesConflict(type1, type2) {\n  if (type1 instanceof _definition.GraphQLList) {\n    return type2 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type2 instanceof _definition.GraphQLList) {\n    return type1 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type1 instanceof _definition.GraphQLNonNull) {\n    return type2 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if (type2 instanceof _definition.GraphQLNonNull) {\n    return type1 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {\n    return type1 !== type2;\n  }\n  return false;\n}\n\n// Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n  return cached;\n}\n\n// Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        var fieldName = selection.name.value;\n        var fieldDef = void 0;\n        if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n        var responseName = selection.alias ? selection.alias.value : fieldName;\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n      case Kind.INLINE_FRAGMENT:\n        var typeCondition = selection.typeCondition;\n        var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;\n        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n        break;\n    }\n  }\n}\n\n// Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref3) {\n      var reason = _ref3[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref4) {\n      var fields1 = _ref4[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref5) {\n      var fields2 = _ref5[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\nvar PairSet = function () {\n  function PairSet() {\n    _classCallCheck(this, PairSet);\n\n    this._data = Object.create(null);\n  }\n\n  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n    if (result === undefined) {\n      return false;\n    }\n    // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n    return true;\n  };\n\n  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n  map[b] = areMutuallyExclusive;\n}"},"lineCount":557}},"hash":"40770eae3a778bc04100b6957b198235","cacheData":{"env":{}}}