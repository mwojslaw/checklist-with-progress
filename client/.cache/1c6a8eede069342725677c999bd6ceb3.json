{"dependencies":[{"name":"graphql","loc":{"line":4,"column":24}},{"name":"uuid","loc":{"line":5,"column":19}},{"name":"./schemaGenerator","loc":{"line":6,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar graphql_2 = require(\"graphql\");\nvar uuid = require(\"uuid\");\nvar schemaGenerator_1 = require(\"./schemaGenerator\");\n// This function wraps addMockFunctionsToSchema for more convenience\nfunction mockServer(schema, mocks, preserveResolvers) {\n    if (preserveResolvers === void 0) { preserveResolvers = false; }\n    var mySchema;\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        // TODO: provide useful error messages here if this fails\n        mySchema = schemaGenerator_1.buildSchemaFromTypeDefinitions(schema);\n    }\n    else {\n        mySchema = schema;\n    }\n    addMockFunctionsToSchema({ schema: mySchema, mocks: mocks, preserveResolvers: preserveResolvers });\n    return { query: function (query, vars) { return graphql_2.graphql(mySchema, query, {}, {}, vars); } };\n}\nexports.mockServer = mockServer;\n// TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\nfunction addMockFunctionsToSchema(_a) {\n    var schema = _a.schema, _b = _a.mocks, mocks = _b === void 0 ? {} : _b, _c = _a.preserveResolvers, preserveResolvers = _c === void 0 ? false : _c;\n    function isObject(thing) {\n        return thing === Object(thing) && !Array.isArray(thing);\n    }\n    if (!schema) {\n        throw new Error('Must provide schema to mock');\n    }\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n    }\n    if (!isObject(mocks)) {\n        throw new Error('mocks must be of type Object');\n    }\n    // use Map internally, because that API is nicer.\n    var mockFunctionMap = new Map();\n    Object.keys(mocks).forEach(function (typeName) {\n        mockFunctionMap.set(typeName, mocks[typeName]);\n    });\n    mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n        if (typeof mockFunction !== 'function') {\n            throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n        }\n    });\n    var defaultMockMap = new Map();\n    defaultMockMap.set('Int', function () { return Math.round(Math.random() * 200) - 100; });\n    defaultMockMap.set('Float', function () { return (Math.random() * 200) - 100; });\n    defaultMockMap.set('String', function () { return 'Hello World'; });\n    defaultMockMap.set('Boolean', function () { return Math.random() > 0.5; });\n    defaultMockMap.set('ID', function () { return uuid.v4(); });\n    function mergeObjects(a, b) {\n        return Object.assign(a, b);\n    }\n    function copyOwnPropsIfNotPresent(target, source) {\n        Object.getOwnPropertyNames(source).forEach(function (prop) {\n            if (!Object.getOwnPropertyDescriptor(target, prop)) {\n                Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n            }\n        });\n    }\n    function copyOwnProps(target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        sources.forEach(function (source) {\n            var chain = source;\n            while (chain) {\n                copyOwnPropsIfNotPresent(target, chain);\n                chain = Object.getPrototypeOf(chain);\n            }\n        });\n        return target;\n    }\n    // returns a random element from that ary\n    function getRandomElement(ary) {\n        var sample = Math.floor(Math.random() * ary.length);\n        return ary[sample];\n    }\n    // takes either an object or a (possibly nested) array\n    // and completes the customMock object with any fields\n    // defined on genericMock\n    // only merges objects or arrays. Scalars are returned as is\n    function mergeMocks(genericMockFunction, customMock) {\n        if (Array.isArray(customMock)) {\n            return customMock.map(function (el) { return mergeMocks(genericMockFunction, el); });\n        }\n        if (isObject(customMock)) {\n            return mergeObjects(genericMockFunction(), customMock);\n        }\n        return customMock;\n    }\n    function getResolveType(namedFieldType) {\n        if ((namedFieldType instanceof graphql_1.GraphQLInterfaceType) ||\n            (namedFieldType instanceof graphql_1.GraphQLUnionType)) {\n            return namedFieldType.resolveType;\n        }\n        else {\n            return undefined;\n        }\n    }\n    function assignResolveType(type) {\n        var fieldType = graphql_1.getNullableType(type);\n        var namedFieldType = graphql_1.getNamedType(fieldType);\n        var oldResolveType = getResolveType(namedFieldType);\n        if (preserveResolvers && oldResolveType && oldResolveType.length) {\n            return;\n        }\n        if (namedFieldType instanceof graphql_1.GraphQLUnionType ||\n            namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n            // the default `resolveType` always returns null. We add a fallback\n            // resolution that works with how unions and interface are mocked\n            namedFieldType.resolveType = function (data, context, info) {\n                return info.schema.getType(data.__typename);\n            };\n        }\n    }\n    var mockType = function (type, typeName, fieldName) {\n        // order of precendence for mocking:\n        // 1. if the object passed in already has fieldName, just use that\n        // --> if it's a function, that becomes your resolver\n        // --> if it's a value, the mock resolver will return that\n        // 2. if the nullableType is a list, recurse\n        // 2. if there's a mock defined for this typeName, that will be used\n        // 3. if there's no mock defined, use the default mocks for this type\n        return function (root, args, context, info) {\n            // nullability doesn't matter for the purpose of mocking.\n            var fieldType = graphql_1.getNullableType(type);\n            var namedFieldType = graphql_1.getNamedType(fieldType);\n            if (root && typeof root[fieldName] !== 'undefined') {\n                var result = void 0;\n                // if we're here, the field is already defined\n                if (typeof root[fieldName] === 'function') {\n                    result = root[fieldName](root, args, context, info);\n                    if (result instanceof MockList) {\n                        result = result.mock(root, args, context, info, fieldType, mockType);\n                    }\n                }\n                else {\n                    result = root[fieldName];\n                }\n                // Now we merge the result with the default mock for this type.\n                // This allows overriding defaults while writing very little code.\n                if (mockFunctionMap.has(namedFieldType.name)) {\n                    result = mergeMocks(mockFunctionMap.get(namedFieldType.name).bind(null, root, args, context, info), result);\n                }\n                return result;\n            }\n            if (fieldType instanceof graphql_1.GraphQLList) {\n                return [mockType(fieldType.ofType)(root, args, context, info),\n                    mockType(fieldType.ofType)(root, args, context, info)];\n            }\n            if (mockFunctionMap.has(fieldType.name) && !(fieldType instanceof graphql_1.GraphQLUnionType ||\n                fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n                // the object passed doesn't have this field, so we apply the default mock\n                return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n            }\n            if (fieldType instanceof graphql_1.GraphQLObjectType) {\n                // objects don't return actual data, we only need to mock scalars!\n                return {};\n            }\n            // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n            // otherwise randomly pick a type from all implementation types\n            if (fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType) {\n                var implementationType = void 0;\n                if (mockFunctionMap.has(fieldType.name)) {\n                    var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n                    if (!interfaceMockObj || !interfaceMockObj.__typename) {\n                        return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n                    }\n                    implementationType = schema.getType(interfaceMockObj.__typename);\n                }\n                else {\n                    var possibleTypes = schema.getPossibleTypes(fieldType);\n                    implementationType = getRandomElement(possibleTypes);\n                }\n                return Object.assign({ __typename: implementationType }, mockType(implementationType)(root, args, context, info));\n            }\n            if (fieldType instanceof graphql_1.GraphQLEnumType) {\n                return getRandomElement(fieldType.getValues()).value;\n            }\n            if (defaultMockMap.has(fieldType.name)) {\n                return defaultMockMap.get(fieldType.name)(root, args, context, info);\n            }\n            // if we get to here, we don't have a value, and we don't have a mock for this type,\n            // we could return undefined, but that would be hard to debug, so we throw instead.\n            // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n            return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n        };\n    };\n    schemaGenerator_1.forEachField(schema, function (field, typeName, fieldName) {\n        assignResolveType(field.type);\n        var mockResolver;\n        // we have to handle the root mutation and root query types differently,\n        // because no resolver is called at the root.\n        /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n        var isOnQueryType = schema.getQueryType() ? (schema.getQueryType().name === typeName) : false;\n        var isOnMutationType = schema.getMutationType() ? (schema.getMutationType().name === typeName) : false;\n        if (isOnQueryType || isOnMutationType) {\n            if (mockFunctionMap.has(typeName)) {\n                var rootMock_1 = mockFunctionMap.get(typeName);\n                // XXX: BUG in here, need to provide proper signature for rootMock.\n                if (rootMock_1(undefined, {}, {}, {})[fieldName]) {\n                    // TODO: assert that it's a function\n                    mockResolver = function (root, args, context, info) {\n                        var updatedRoot = root || {}; // TODO: should we clone instead?\n                        updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];\n                        // XXX this is a bit of a hack to still use mockType, which\n                        // lets you mock lists etc. as well\n                        // otherwise we could just set field.resolve to rootMock()[fieldName]\n                        // it's like pretending there was a resolve function that ran before\n                        // the root resolve function.\n                        return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n                    };\n                }\n            }\n        }\n        if (!mockResolver) {\n            mockResolver = mockType(field.type, typeName, fieldName);\n        }\n        if (!preserveResolvers || !field.resolve) {\n            field.resolve = mockResolver;\n        }\n        else {\n            var oldResolver_1 = field.resolve;\n            field.resolve = function (rootObject, args, context, info) { return Promise.all([\n                mockResolver(rootObject, args, context, info),\n                oldResolver_1(rootObject, args, context, info),\n            ]).then(function (values) {\n                var mockedValue = values[0], resolvedValue = values[1];\n                // In case we couldn't mock\n                if (mockedValue instanceof Error) {\n                    // only if value was not resolved, populate the error.\n                    if (undefined === resolvedValue) {\n                        throw mockedValue;\n                    }\n                    return resolvedValue;\n                }\n                if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n                    return (undefined !== resolvedValue) ? resolvedValue : mockedValue;\n                }\n                if (isObject(mockedValue) && isObject(resolvedValue)) {\n                    // Object.assign() won't do here, as we need to all properties, including\n                    // the non-enumerable ones and defined using Object.defineProperty\n                    return copyOwnProps({}, resolvedValue, mockedValue);\n                }\n                return (undefined !== resolvedValue) ? resolvedValue : mockedValue;\n            }); };\n        }\n    });\n}\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\nvar MockList = (function () {\n    // wrappedFunction can return another MockList or a value\n    function MockList(len, wrappedFunction) {\n        this.len = len;\n        if (typeof wrappedFunction !== 'undefined') {\n            if (typeof wrappedFunction !== 'function') {\n                throw new Error('Second argument to MockList must be a function or undefined');\n            }\n            this.wrappedFunction = wrappedFunction;\n        }\n    }\n    MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n        var arr;\n        if (Array.isArray(this.len)) {\n            arr = new Array(this.randint(this.len[0], this.len[1]));\n        }\n        else {\n            arr = new Array(this.len);\n        }\n        for (var i = 0; i < arr.length; i++) {\n            if (typeof this.wrappedFunction === 'function') {\n                var res = this.wrappedFunction(root, args, context, info);\n                if (res instanceof MockList) {\n                    var nullableType = graphql_1.getNullableType(fieldType.ofType);\n                    arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n                }\n                else {\n                    arr[i] = res;\n                }\n            }\n            else {\n                arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n            }\n        }\n        return arr;\n    };\n    MockList.prototype.randint = function (low, high) {\n        return Math.floor((Math.random() * ((high - low) + 1)) + low);\n    };\n    return MockList;\n}());\nexports.MockList = MockList;\n//# sourceMappingURL=mock.js.map","map":{"mappings":[{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/graphql-tools/dist/mock.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}}],"sources":{"node_modules/graphql-tools/dist/mock.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar graphql_2 = require(\"graphql\");\nvar uuid = require(\"uuid\");\nvar schemaGenerator_1 = require(\"./schemaGenerator\");\n// This function wraps addMockFunctionsToSchema for more convenience\nfunction mockServer(schema, mocks, preserveResolvers) {\n    if (preserveResolvers === void 0) { preserveResolvers = false; }\n    var mySchema;\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        // TODO: provide useful error messages here if this fails\n        mySchema = schemaGenerator_1.buildSchemaFromTypeDefinitions(schema);\n    }\n    else {\n        mySchema = schema;\n    }\n    addMockFunctionsToSchema({ schema: mySchema, mocks: mocks, preserveResolvers: preserveResolvers });\n    return { query: function (query, vars) { return graphql_2.graphql(mySchema, query, {}, {}, vars); } };\n}\nexports.mockServer = mockServer;\n// TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\nfunction addMockFunctionsToSchema(_a) {\n    var schema = _a.schema, _b = _a.mocks, mocks = _b === void 0 ? {} : _b, _c = _a.preserveResolvers, preserveResolvers = _c === void 0 ? false : _c;\n    function isObject(thing) {\n        return thing === Object(thing) && !Array.isArray(thing);\n    }\n    if (!schema) {\n        throw new Error('Must provide schema to mock');\n    }\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n    }\n    if (!isObject(mocks)) {\n        throw new Error('mocks must be of type Object');\n    }\n    // use Map internally, because that API is nicer.\n    var mockFunctionMap = new Map();\n    Object.keys(mocks).forEach(function (typeName) {\n        mockFunctionMap.set(typeName, mocks[typeName]);\n    });\n    mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n        if (typeof mockFunction !== 'function') {\n            throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n        }\n    });\n    var defaultMockMap = new Map();\n    defaultMockMap.set('Int', function () { return Math.round(Math.random() * 200) - 100; });\n    defaultMockMap.set('Float', function () { return (Math.random() * 200) - 100; });\n    defaultMockMap.set('String', function () { return 'Hello World'; });\n    defaultMockMap.set('Boolean', function () { return Math.random() > 0.5; });\n    defaultMockMap.set('ID', function () { return uuid.v4(); });\n    function mergeObjects(a, b) {\n        return Object.assign(a, b);\n    }\n    function copyOwnPropsIfNotPresent(target, source) {\n        Object.getOwnPropertyNames(source).forEach(function (prop) {\n            if (!Object.getOwnPropertyDescriptor(target, prop)) {\n                Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n            }\n        });\n    }\n    function copyOwnProps(target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        sources.forEach(function (source) {\n            var chain = source;\n            while (chain) {\n                copyOwnPropsIfNotPresent(target, chain);\n                chain = Object.getPrototypeOf(chain);\n            }\n        });\n        return target;\n    }\n    // returns a random element from that ary\n    function getRandomElement(ary) {\n        var sample = Math.floor(Math.random() * ary.length);\n        return ary[sample];\n    }\n    // takes either an object or a (possibly nested) array\n    // and completes the customMock object with any fields\n    // defined on genericMock\n    // only merges objects or arrays. Scalars are returned as is\n    function mergeMocks(genericMockFunction, customMock) {\n        if (Array.isArray(customMock)) {\n            return customMock.map(function (el) { return mergeMocks(genericMockFunction, el); });\n        }\n        if (isObject(customMock)) {\n            return mergeObjects(genericMockFunction(), customMock);\n        }\n        return customMock;\n    }\n    function getResolveType(namedFieldType) {\n        if ((namedFieldType instanceof graphql_1.GraphQLInterfaceType) ||\n            (namedFieldType instanceof graphql_1.GraphQLUnionType)) {\n            return namedFieldType.resolveType;\n        }\n        else {\n            return undefined;\n        }\n    }\n    function assignResolveType(type) {\n        var fieldType = graphql_1.getNullableType(type);\n        var namedFieldType = graphql_1.getNamedType(fieldType);\n        var oldResolveType = getResolveType(namedFieldType);\n        if (preserveResolvers && oldResolveType && oldResolveType.length) {\n            return;\n        }\n        if (namedFieldType instanceof graphql_1.GraphQLUnionType ||\n            namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n            // the default `resolveType` always returns null. We add a fallback\n            // resolution that works with how unions and interface are mocked\n            namedFieldType.resolveType = function (data, context, info) {\n                return info.schema.getType(data.__typename);\n            };\n        }\n    }\n    var mockType = function (type, typeName, fieldName) {\n        // order of precendence for mocking:\n        // 1. if the object passed in already has fieldName, just use that\n        // --> if it's a function, that becomes your resolver\n        // --> if it's a value, the mock resolver will return that\n        // 2. if the nullableType is a list, recurse\n        // 2. if there's a mock defined for this typeName, that will be used\n        // 3. if there's no mock defined, use the default mocks for this type\n        return function (root, args, context, info) {\n            // nullability doesn't matter for the purpose of mocking.\n            var fieldType = graphql_1.getNullableType(type);\n            var namedFieldType = graphql_1.getNamedType(fieldType);\n            if (root && typeof root[fieldName] !== 'undefined') {\n                var result = void 0;\n                // if we're here, the field is already defined\n                if (typeof root[fieldName] === 'function') {\n                    result = root[fieldName](root, args, context, info);\n                    if (result instanceof MockList) {\n                        result = result.mock(root, args, context, info, fieldType, mockType);\n                    }\n                }\n                else {\n                    result = root[fieldName];\n                }\n                // Now we merge the result with the default mock for this type.\n                // This allows overriding defaults while writing very little code.\n                if (mockFunctionMap.has(namedFieldType.name)) {\n                    result = mergeMocks(mockFunctionMap.get(namedFieldType.name).bind(null, root, args, context, info), result);\n                }\n                return result;\n            }\n            if (fieldType instanceof graphql_1.GraphQLList) {\n                return [mockType(fieldType.ofType)(root, args, context, info),\n                    mockType(fieldType.ofType)(root, args, context, info)];\n            }\n            if (mockFunctionMap.has(fieldType.name) && !(fieldType instanceof graphql_1.GraphQLUnionType ||\n                fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n                // the object passed doesn't have this field, so we apply the default mock\n                return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n            }\n            if (fieldType instanceof graphql_1.GraphQLObjectType) {\n                // objects don't return actual data, we only need to mock scalars!\n                return {};\n            }\n            // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n            // otherwise randomly pick a type from all implementation types\n            if (fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType) {\n                var implementationType = void 0;\n                if (mockFunctionMap.has(fieldType.name)) {\n                    var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n                    if (!interfaceMockObj || !interfaceMockObj.__typename) {\n                        return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n                    }\n                    implementationType = schema.getType(interfaceMockObj.__typename);\n                }\n                else {\n                    var possibleTypes = schema.getPossibleTypes(fieldType);\n                    implementationType = getRandomElement(possibleTypes);\n                }\n                return Object.assign({ __typename: implementationType }, mockType(implementationType)(root, args, context, info));\n            }\n            if (fieldType instanceof graphql_1.GraphQLEnumType) {\n                return getRandomElement(fieldType.getValues()).value;\n            }\n            if (defaultMockMap.has(fieldType.name)) {\n                return defaultMockMap.get(fieldType.name)(root, args, context, info);\n            }\n            // if we get to here, we don't have a value, and we don't have a mock for this type,\n            // we could return undefined, but that would be hard to debug, so we throw instead.\n            // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n            return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n        };\n    };\n    schemaGenerator_1.forEachField(schema, function (field, typeName, fieldName) {\n        assignResolveType(field.type);\n        var mockResolver;\n        // we have to handle the root mutation and root query types differently,\n        // because no resolver is called at the root.\n        /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n        var isOnQueryType = schema.getQueryType() ? (schema.getQueryType().name === typeName) : false;\n        var isOnMutationType = schema.getMutationType() ? (schema.getMutationType().name === typeName) : false;\n        if (isOnQueryType || isOnMutationType) {\n            if (mockFunctionMap.has(typeName)) {\n                var rootMock_1 = mockFunctionMap.get(typeName);\n                // XXX: BUG in here, need to provide proper signature for rootMock.\n                if (rootMock_1(undefined, {}, {}, {})[fieldName]) {\n                    // TODO: assert that it's a function\n                    mockResolver = function (root, args, context, info) {\n                        var updatedRoot = root || {}; // TODO: should we clone instead?\n                        updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];\n                        // XXX this is a bit of a hack to still use mockType, which\n                        // lets you mock lists etc. as well\n                        // otherwise we could just set field.resolve to rootMock()[fieldName]\n                        // it's like pretending there was a resolve function that ran before\n                        // the root resolve function.\n                        return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n                    };\n                }\n            }\n        }\n        if (!mockResolver) {\n            mockResolver = mockType(field.type, typeName, fieldName);\n        }\n        if (!preserveResolvers || !field.resolve) {\n            field.resolve = mockResolver;\n        }\n        else {\n            var oldResolver_1 = field.resolve;\n            field.resolve = function (rootObject, args, context, info) { return Promise.all([\n                mockResolver(rootObject, args, context, info),\n                oldResolver_1(rootObject, args, context, info),\n            ]).then(function (values) {\n                var mockedValue = values[0], resolvedValue = values[1];\n                // In case we couldn't mock\n                if (mockedValue instanceof Error) {\n                    // only if value was not resolved, populate the error.\n                    if (undefined === resolvedValue) {\n                        throw mockedValue;\n                    }\n                    return resolvedValue;\n                }\n                if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n                    return (undefined !== resolvedValue) ? resolvedValue : mockedValue;\n                }\n                if (isObject(mockedValue) && isObject(resolvedValue)) {\n                    // Object.assign() won't do here, as we need to all properties, including\n                    // the non-enumerable ones and defined using Object.defineProperty\n                    return copyOwnProps({}, resolvedValue, mockedValue);\n                }\n                return (undefined !== resolvedValue) ? resolvedValue : mockedValue;\n            }); };\n        }\n    });\n}\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\nvar MockList = (function () {\n    // wrappedFunction can return another MockList or a value\n    function MockList(len, wrappedFunction) {\n        this.len = len;\n        if (typeof wrappedFunction !== 'undefined') {\n            if (typeof wrappedFunction !== 'function') {\n                throw new Error('Second argument to MockList must be a function or undefined');\n            }\n            this.wrappedFunction = wrappedFunction;\n        }\n    }\n    MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n        var arr;\n        if (Array.isArray(this.len)) {\n            arr = new Array(this.randint(this.len[0], this.len[1]));\n        }\n        else {\n            arr = new Array(this.len);\n        }\n        for (var i = 0; i < arr.length; i++) {\n            if (typeof this.wrappedFunction === 'function') {\n                var res = this.wrappedFunction(root, args, context, info);\n                if (res instanceof MockList) {\n                    var nullableType = graphql_1.getNullableType(fieldType.ofType);\n                    arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n                }\n                else {\n                    arr[i] = res;\n                }\n            }\n            else {\n                arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n            }\n        }\n        return arr;\n    };\n    MockList.prototype.randint = function (low, high) {\n        return Math.floor((Math.random() * ((high - low) + 1)) + low);\n    };\n    return MockList;\n}());\nexports.MockList = MockList;\n//# sourceMappingURL=mock.js.map"},"lineCount":299}},"hash":"c36a1fef6bc82696b98549b5dec5bcbb","cacheData":{"env":{}}}