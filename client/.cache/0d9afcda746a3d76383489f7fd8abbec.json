{"dependencies":[{"name":"../../error","loc":{"line":10,"column":21}},{"name":"../../language/printer","loc":{"line":12,"column":23}},{"name":"../../type/definition","loc":{"line":14,"column":26}},{"name":"../../utilities/typeFromAST","loc":{"line":16,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      if (node.typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}","map":{"mappings":[{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      if (node.typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}"},"lineCount":58}},"hash":"2320cd9dc19a8f7039eca02654717602","cacheData":{"env":{}}}