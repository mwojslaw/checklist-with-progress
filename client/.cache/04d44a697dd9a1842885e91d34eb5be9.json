{"dependencies":[{"name":"graphql","loc":{"line":20,"column":24}},{"name":"deprecated-decorator","loc":{"line":21,"column":37}}],"generated":{"js":"\"use strict\";\n// Generates a schema for graphql-js given a shorthand schema\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// TODO: document each function clearly in the code: what arguments it accepts\n// and what it outputs.\n// TODO: we should refactor this file, rename it to makeExecutableSchema, and move\n// a bunch of utility functions into a separate utitlities folder, one file per function.\nvar graphql_1 = require(\"graphql\");\nvar graphql_2 = require(\"graphql\");\nvar graphql_3 = require(\"graphql\");\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\n// @schemaDefinition: A GraphQL type schema in shorthand\n// @resolvers: Definitions for resolvers to be merged with schema\nvar SchemaError = (function (_super) {\n    __extends(SchemaError, _super);\n    function SchemaError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        Error.captureStackTrace(_this, _this.constructor);\n        return _this;\n    }\n    return SchemaError;\n}(Error));\nexports.SchemaError = SchemaError;\n// type definitions can be a string or an array of strings.\nfunction _generateSchema(typeDefinitions, resolveFunctions, logger, \n    // TODO: rename to allowUndefinedInResolve to be consistent\n    allowUndefinedInResolve, resolverValidationOptions) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new SchemaError('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefinitions) {\n        throw new SchemaError('Must provide typeDefs');\n    }\n    if (!resolveFunctions) {\n        throw new SchemaError('Must provide resolvers');\n    }\n    // TODO: check that typeDefinitions is either string or array of strings\n    var schema = buildSchemaFromTypeDefinitions(typeDefinitions);\n    addResolveFunctionsToSchema(schema, resolveFunctions);\n    assertResolveFunctionsPresent(schema, resolverValidationOptions);\n    if (!allowUndefinedInResolve) {\n        addCatchUndefinedToSchema(schema);\n    }\n    if (logger) {\n        addErrorLoggingToSchema(schema, logger);\n    }\n    return schema;\n}\nfunction makeExecutableSchema(_a) {\n    var typeDefs = _a.typeDefs, _b = _a.resolvers, resolvers = _b === void 0 ? {} : _b, connectors = _a.connectors, logger = _a.logger, _c = _a.allowUndefinedInResolve, allowUndefinedInResolve = _c === void 0 ? true : _c, _d = _a.resolverValidationOptions, resolverValidationOptions = _d === void 0 ? {} : _d;\n    var jsSchema = _generateSchema(typeDefs, resolvers, logger, allowUndefinedInResolve, resolverValidationOptions);\n    if (typeof resolvers['__schema'] === 'function') {\n        // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n        // not doing that now, because I'd have to rewrite a lot of tests.\n        addSchemaLevelResolveFunction(jsSchema, resolvers['__schema']);\n    }\n    if (connectors) {\n        // connectors are optional, at least for now. That means you can just import them in the resolve\n        // function if you want.\n        attachConnectorsToContext(jsSchema, connectors);\n    }\n    return jsSchema;\n}\nexports.makeExecutableSchema = makeExecutableSchema;\nfunction isDocumentNode(typeDefinitions) {\n    return typeDefinitions.kind !== undefined;\n}\nfunction uniq(array) {\n    return array.reduce(function (accumulator, currentValue) {\n        return (accumulator.indexOf(currentValue) === -1) ? accumulator.concat([currentValue]) : accumulator;\n    }, []);\n}\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n    if (calledFunctionRefs === void 0) { calledFunctionRefs = []; }\n    var resolvedTypeDefinitions = [];\n    typeDefinitionsAry.forEach(function (typeDef) {\n        if (isDocumentNode(typeDef)) {\n            typeDef = graphql_1.print(typeDef);\n        }\n        if (typeof typeDef === 'function') {\n            if (calledFunctionRefs.indexOf(typeDef) === -1) {\n                calledFunctionRefs.push(typeDef);\n                resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n            }\n        }\n        else if (typeof typeDef === 'string') {\n            resolvedTypeDefinitions.push(typeDef.trim());\n        }\n        else {\n            var type = typeof typeDef;\n            throw new SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n        }\n    });\n    return uniq(resolvedTypeDefinitions.map(function (x) { return x.trim(); })).join('\\n');\n}\nexports.concatenateTypeDefs = concatenateTypeDefs;\nfunction buildSchemaFromTypeDefinitions(typeDefinitions) {\n    // TODO: accept only array here, otherwise interfaces get confusing.\n    var myDefinitions = typeDefinitions;\n    var astDocument;\n    if (isDocumentNode(typeDefinitions)) {\n        astDocument = typeDefinitions;\n    }\n    else if (typeof myDefinitions !== 'string') {\n        if (!Array.isArray(myDefinitions)) {\n            var type = typeof myDefinitions;\n            throw new SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n        }\n        myDefinitions = concatenateTypeDefs(myDefinitions);\n    }\n    if (typeof myDefinitions === 'string') {\n        astDocument = graphql_1.parse(myDefinitions);\n    }\n    var schema = graphql_2.buildASTSchema(astDocument);\n    var extensionsAst = extractExtensionDefinitions(astDocument);\n    if (extensionsAst.definitions.length > 0) {\n        schema = graphql_2.extendSchema(schema, extensionsAst);\n    }\n    return schema;\n}\nexports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;\nfunction extractExtensionDefinitions(ast) {\n    var extensionDefs = ast.definitions.filter(function (def) { return def.kind === graphql_1.Kind.TYPE_EXTENSION_DEFINITION; });\n    return Object.assign({}, ast, {\n        definitions: extensionDefs,\n    });\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!graphql_3.getNamedType(type).name.startsWith('__') && type instanceof graphql_3.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\nexports.forEachField = forEachField;\n// takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n    version: '0.7.0',\n    url: 'https://github.com/apollostack/graphql-tools/issues/140',\n}, function (schema, connectors) {\n    if (!schema || !(schema instanceof graphql_3.GraphQLSchema)) {\n        throw new Error('schema must be an instance of GraphQLSchema. ' +\n            'This error could be caused by installing more than one version of GraphQL-JS');\n    }\n    if (typeof connectors !== 'object') {\n        var connectorType = typeof connectors;\n        throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n    }\n    if (Object.keys(connectors).length === 0) {\n        throw new Error('Expected connectors to not be an empty object');\n    }\n    if (Array.isArray(connectors)) {\n        throw new Error('Expected connectors to be of type object, got Array');\n    }\n    if (schema['_apolloConnectorsAttached']) {\n        throw new Error('Connectors already attached to context, cannot attach more than once');\n    }\n    schema['_apolloConnectorsAttached'] = true;\n    var attachconnectorFn = function (root, args, ctx) {\n        if (typeof ctx !== 'object') {\n            // if in any way possible, we should throw an error when the attachconnectors\n            // function is called, not when a query is executed.\n            var contextType = typeof ctx;\n            throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n        }\n        if (typeof ctx.connectors === 'undefined') {\n            ctx.connectors = {};\n        }\n        Object.keys(connectors).forEach(function (connectorName) {\n            var connector = connectors[connectorName];\n            if (!!connector.prototype) {\n                ctx.connectors[connectorName] = new connector(ctx);\n            }\n            else {\n                throw new Error(\"Connector must be a function or an class\");\n            }\n        });\n        return root;\n    };\n    addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.attachConnectorsToContext = attachConnectorsToContext;\n// wraps all resolve functions of query, mutation or subscription fields\n// with the provided function to simulate a root schema level resolve funciton\nfunction addSchemaLevelResolveFunction(schema, fn) {\n    // TODO test that schema is a schema, fn is a function\n    var rootTypes = ([\n        schema.getQueryType(),\n        schema.getMutationType(),\n        schema.getSubscriptionType(),\n    ]).filter(function (x) { return !!x; });\n    rootTypes.forEach(function (type) {\n        // XXX this should run at most once per request to simulate a true root resolver\n        // for graphql-js this is an approximation that works with queries but not mutations\n        var rootResolveFn = runAtMostOncePerRequest(fn);\n        var fields = type.getFields();\n        Object.keys(fields).forEach(function (fieldName) {\n            // XXX if the type is a subscription, a same query AST will be ran multiple times so we\n            // deactivate here the runOnce if it's a subscription. This may not be optimal though...\n            if (type === schema.getSubscriptionType()) {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, fn);\n            }\n            else {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, rootResolveFn);\n            }\n        });\n    });\n}\nexports.addSchemaLevelResolveFunction = addSchemaLevelResolveFunction;\nfunction getFieldsForType(type) {\n    if ((type instanceof graphql_3.GraphQLObjectType) ||\n        (type instanceof graphql_3.GraphQLInterfaceType)) {\n        return type.getFields();\n    }\n    else {\n        return undefined;\n    }\n}\nfunction addResolveFunctionsToSchema(schema, resolveFunctions) {\n    Object.keys(resolveFunctions).forEach(function (typeName) {\n        var type = schema.getType(typeName);\n        if (!type && typeName !== '__schema') {\n            throw new SchemaError(\"\\\"\" + typeName + \"\\\" defined in resolvers, but not in schema\");\n        }\n        Object.keys(resolveFunctions[typeName]).forEach(function (fieldName) {\n            if (fieldName.startsWith('__')) {\n                // this is for isTypeOf and resolveType and all the other stuff.\n                // TODO require resolveType for unions and interfaces.\n                type[fieldName.substring(2)] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            if (type instanceof graphql_3.GraphQLScalarType) {\n                type[fieldName] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            var fields = getFieldsForType(type);\n            if (!fields) {\n                throw new SchemaError(typeName + \" was defined in resolvers, but it's not an object\");\n            }\n            if (!fields[fieldName]) {\n                throw new SchemaError(typeName + \".\" + fieldName + \" defined in resolvers, but not in schema\");\n            }\n            var field = fields[fieldName];\n            var fieldResolve = resolveFunctions[typeName][fieldName];\n            if (typeof fieldResolve === 'function') {\n                // for convenience. Allows shorter syntax in resolver definition file\n                setFieldProperties(field, { resolve: fieldResolve });\n            }\n            else {\n                if (typeof fieldResolve !== 'object') {\n                    throw new SchemaError(\"Resolver \" + typeName + \".\" + fieldName + \" must be object or function\");\n                }\n                setFieldProperties(field, fieldResolve);\n            }\n        });\n    });\n}\nexports.addResolveFunctionsToSchema = addResolveFunctionsToSchema;\nfunction setFieldProperties(field, propertiesObj) {\n    Object.keys(propertiesObj).forEach(function (propertyName) {\n        field[propertyName] = propertiesObj[propertyName];\n    });\n}\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n    if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }\n    var _a = resolverValidationOptions.requireResolversForArgs, requireResolversForArgs = _a === void 0 ? false : _a, _b = resolverValidationOptions.requireResolversForNonScalar, requireResolversForNonScalar = _b === void 0 ? false : _b, _c = resolverValidationOptions.requireResolversForAllFields, requireResolversForAllFields = _c === void 0 ? false : _c;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        // requires a resolve function for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that returns a non-scalar type\n        if (requireResolversForNonScalar && !(graphql_3.getNamedType(field.type) instanceof graphql_3.GraphQLScalarType)) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n    });\n}\nexports.assertResolveFunctionsPresent = assertResolveFunctionsPresent;\nfunction expectResolveFunction(field, typeName, fieldName) {\n    if (!field.resolve) {\n        // tslint:disable-next-line: max-line-length\n        console.warn(\"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n    }\n}\nfunction addErrorLoggingToSchema(schema, logger) {\n    if (!logger) {\n        throw new Error('Must provide a logger');\n    }\n    if (typeof logger.log !== 'function') {\n        throw new Error('Logger.log must be a function');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateWithLogger(field.resolve, logger, errorHint);\n    });\n}\nexports.addErrorLoggingToSchema = addErrorLoggingToSchema;\n// XXX badly named function. this doesn't really wrap, it just chains resolvers...\nfunction wrapResolver(innerResolver, outerResolver) {\n    return function (obj, args, ctx, info) {\n        return Promise.resolve(outerResolver(obj, args, ctx, info)).then(function (root) {\n            if (innerResolver) {\n                return innerResolver(root, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(root, args, ctx, info);\n        });\n    };\n}\nfunction chainResolvers(resolvers) {\n    return function (root, args, ctx, info) {\n        return resolvers.reduce(function (prev, curResolver) {\n            if (curResolver) {\n                return curResolver(prev, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(prev, args, ctx, info);\n        }, root);\n    };\n}\nexports.chainResolvers = chainResolvers;\n/*\n * fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message\n */\nfunction decorateWithLogger(fn, logger, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    var logError = function (e) {\n        // TODO: clone the error properly\n        var newE = new Error();\n        newE.stack = e.stack;\n        /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */\n        if (hint) {\n            newE['originalMessage'] = e.message;\n            newE['message'] = \"Error in resolver \" + hint + \"\\n\" + e.message;\n        }\n        logger.log(newE);\n    };\n    return function (root, args, ctx, info) {\n        try {\n            var result = fn(root, args, ctx, info);\n            // If the resolve function returns a Promise log any Promise rejects.\n            if (result && typeof result.then === 'function' && typeof result.catch === 'function') {\n                result.catch(function (reason) {\n                    // make sure that it's an error we're logging.\n                    var error = reason instanceof Error ? reason : new Error(reason);\n                    logError(error);\n                    // We don't want to leave an unhandled exception so pass on error.\n                    return reason;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            logError(e);\n            // we want to pass on the error, just in case.\n            throw e;\n        }\n    };\n}\nfunction addCatchUndefinedToSchema(schema) {\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateToCatchUndefined(field.resolve, errorHint);\n    });\n}\nexports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;\nfunction decorateToCatchUndefined(fn, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    return function (root, args, ctx, info) {\n        var result = fn(root, args, ctx, info);\n        if (typeof result === 'undefined') {\n            throw new Error(\"Resolve function for \\\"\" + hint + \"\\\" returned undefined\");\n        }\n        return result;\n    };\n}\n// XXX this function only works for resolvers\n// XXX very hacky way to remember if the function\n// already ran for this request. This will only work\n// if people don't actually cache the operation.\n// if they do cache the operation, they will have to\n// manually remove the __runAtMostOnce before every request.\nfunction runAtMostOncePerRequest(fn) {\n    var value;\n    var randomNumber = Math.random();\n    return function (root, args, ctx, info) {\n        if (!info.operation['__runAtMostOnce']) {\n            info.operation['__runAtMostOnce'] = {};\n        }\n        if (!info.operation['__runAtMostOnce'][randomNumber]) {\n            info.operation['__runAtMostOnce'][randomNumber] = true;\n            value = fn(root, args, ctx, info);\n        }\n        return value;\n    };\n}\n//# sourceMappingURL=schemaGenerator.js.map","map":{"mappings":[{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/graphql-tools/dist/schemaGenerator.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}}],"sources":{"node_modules/graphql-tools/dist/schemaGenerator.js":"\"use strict\";\n// Generates a schema for graphql-js given a shorthand schema\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// TODO: document each function clearly in the code: what arguments it accepts\n// and what it outputs.\n// TODO: we should refactor this file, rename it to makeExecutableSchema, and move\n// a bunch of utility functions into a separate utitlities folder, one file per function.\nvar graphql_1 = require(\"graphql\");\nvar graphql_2 = require(\"graphql\");\nvar graphql_3 = require(\"graphql\");\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\n// @schemaDefinition: A GraphQL type schema in shorthand\n// @resolvers: Definitions for resolvers to be merged with schema\nvar SchemaError = (function (_super) {\n    __extends(SchemaError, _super);\n    function SchemaError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        Error.captureStackTrace(_this, _this.constructor);\n        return _this;\n    }\n    return SchemaError;\n}(Error));\nexports.SchemaError = SchemaError;\n// type definitions can be a string or an array of strings.\nfunction _generateSchema(typeDefinitions, resolveFunctions, logger, \n    // TODO: rename to allowUndefinedInResolve to be consistent\n    allowUndefinedInResolve, resolverValidationOptions) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new SchemaError('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefinitions) {\n        throw new SchemaError('Must provide typeDefs');\n    }\n    if (!resolveFunctions) {\n        throw new SchemaError('Must provide resolvers');\n    }\n    // TODO: check that typeDefinitions is either string or array of strings\n    var schema = buildSchemaFromTypeDefinitions(typeDefinitions);\n    addResolveFunctionsToSchema(schema, resolveFunctions);\n    assertResolveFunctionsPresent(schema, resolverValidationOptions);\n    if (!allowUndefinedInResolve) {\n        addCatchUndefinedToSchema(schema);\n    }\n    if (logger) {\n        addErrorLoggingToSchema(schema, logger);\n    }\n    return schema;\n}\nfunction makeExecutableSchema(_a) {\n    var typeDefs = _a.typeDefs, _b = _a.resolvers, resolvers = _b === void 0 ? {} : _b, connectors = _a.connectors, logger = _a.logger, _c = _a.allowUndefinedInResolve, allowUndefinedInResolve = _c === void 0 ? true : _c, _d = _a.resolverValidationOptions, resolverValidationOptions = _d === void 0 ? {} : _d;\n    var jsSchema = _generateSchema(typeDefs, resolvers, logger, allowUndefinedInResolve, resolverValidationOptions);\n    if (typeof resolvers['__schema'] === 'function') {\n        // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n        // not doing that now, because I'd have to rewrite a lot of tests.\n        addSchemaLevelResolveFunction(jsSchema, resolvers['__schema']);\n    }\n    if (connectors) {\n        // connectors are optional, at least for now. That means you can just import them in the resolve\n        // function if you want.\n        attachConnectorsToContext(jsSchema, connectors);\n    }\n    return jsSchema;\n}\nexports.makeExecutableSchema = makeExecutableSchema;\nfunction isDocumentNode(typeDefinitions) {\n    return typeDefinitions.kind !== undefined;\n}\nfunction uniq(array) {\n    return array.reduce(function (accumulator, currentValue) {\n        return (accumulator.indexOf(currentValue) === -1) ? accumulator.concat([currentValue]) : accumulator;\n    }, []);\n}\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n    if (calledFunctionRefs === void 0) { calledFunctionRefs = []; }\n    var resolvedTypeDefinitions = [];\n    typeDefinitionsAry.forEach(function (typeDef) {\n        if (isDocumentNode(typeDef)) {\n            typeDef = graphql_1.print(typeDef);\n        }\n        if (typeof typeDef === 'function') {\n            if (calledFunctionRefs.indexOf(typeDef) === -1) {\n                calledFunctionRefs.push(typeDef);\n                resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n            }\n        }\n        else if (typeof typeDef === 'string') {\n            resolvedTypeDefinitions.push(typeDef.trim());\n        }\n        else {\n            var type = typeof typeDef;\n            throw new SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n        }\n    });\n    return uniq(resolvedTypeDefinitions.map(function (x) { return x.trim(); })).join('\\n');\n}\nexports.concatenateTypeDefs = concatenateTypeDefs;\nfunction buildSchemaFromTypeDefinitions(typeDefinitions) {\n    // TODO: accept only array here, otherwise interfaces get confusing.\n    var myDefinitions = typeDefinitions;\n    var astDocument;\n    if (isDocumentNode(typeDefinitions)) {\n        astDocument = typeDefinitions;\n    }\n    else if (typeof myDefinitions !== 'string') {\n        if (!Array.isArray(myDefinitions)) {\n            var type = typeof myDefinitions;\n            throw new SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n        }\n        myDefinitions = concatenateTypeDefs(myDefinitions);\n    }\n    if (typeof myDefinitions === 'string') {\n        astDocument = graphql_1.parse(myDefinitions);\n    }\n    var schema = graphql_2.buildASTSchema(astDocument);\n    var extensionsAst = extractExtensionDefinitions(astDocument);\n    if (extensionsAst.definitions.length > 0) {\n        schema = graphql_2.extendSchema(schema, extensionsAst);\n    }\n    return schema;\n}\nexports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;\nfunction extractExtensionDefinitions(ast) {\n    var extensionDefs = ast.definitions.filter(function (def) { return def.kind === graphql_1.Kind.TYPE_EXTENSION_DEFINITION; });\n    return Object.assign({}, ast, {\n        definitions: extensionDefs,\n    });\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!graphql_3.getNamedType(type).name.startsWith('__') && type instanceof graphql_3.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\nexports.forEachField = forEachField;\n// takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n    version: '0.7.0',\n    url: 'https://github.com/apollostack/graphql-tools/issues/140',\n}, function (schema, connectors) {\n    if (!schema || !(schema instanceof graphql_3.GraphQLSchema)) {\n        throw new Error('schema must be an instance of GraphQLSchema. ' +\n            'This error could be caused by installing more than one version of GraphQL-JS');\n    }\n    if (typeof connectors !== 'object') {\n        var connectorType = typeof connectors;\n        throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n    }\n    if (Object.keys(connectors).length === 0) {\n        throw new Error('Expected connectors to not be an empty object');\n    }\n    if (Array.isArray(connectors)) {\n        throw new Error('Expected connectors to be of type object, got Array');\n    }\n    if (schema['_apolloConnectorsAttached']) {\n        throw new Error('Connectors already attached to context, cannot attach more than once');\n    }\n    schema['_apolloConnectorsAttached'] = true;\n    var attachconnectorFn = function (root, args, ctx) {\n        if (typeof ctx !== 'object') {\n            // if in any way possible, we should throw an error when the attachconnectors\n            // function is called, not when a query is executed.\n            var contextType = typeof ctx;\n            throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n        }\n        if (typeof ctx.connectors === 'undefined') {\n            ctx.connectors = {};\n        }\n        Object.keys(connectors).forEach(function (connectorName) {\n            var connector = connectors[connectorName];\n            if (!!connector.prototype) {\n                ctx.connectors[connectorName] = new connector(ctx);\n            }\n            else {\n                throw new Error(\"Connector must be a function or an class\");\n            }\n        });\n        return root;\n    };\n    addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.attachConnectorsToContext = attachConnectorsToContext;\n// wraps all resolve functions of query, mutation or subscription fields\n// with the provided function to simulate a root schema level resolve funciton\nfunction addSchemaLevelResolveFunction(schema, fn) {\n    // TODO test that schema is a schema, fn is a function\n    var rootTypes = ([\n        schema.getQueryType(),\n        schema.getMutationType(),\n        schema.getSubscriptionType(),\n    ]).filter(function (x) { return !!x; });\n    rootTypes.forEach(function (type) {\n        // XXX this should run at most once per request to simulate a true root resolver\n        // for graphql-js this is an approximation that works with queries but not mutations\n        var rootResolveFn = runAtMostOncePerRequest(fn);\n        var fields = type.getFields();\n        Object.keys(fields).forEach(function (fieldName) {\n            // XXX if the type is a subscription, a same query AST will be ran multiple times so we\n            // deactivate here the runOnce if it's a subscription. This may not be optimal though...\n            if (type === schema.getSubscriptionType()) {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, fn);\n            }\n            else {\n                fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, rootResolveFn);\n            }\n        });\n    });\n}\nexports.addSchemaLevelResolveFunction = addSchemaLevelResolveFunction;\nfunction getFieldsForType(type) {\n    if ((type instanceof graphql_3.GraphQLObjectType) ||\n        (type instanceof graphql_3.GraphQLInterfaceType)) {\n        return type.getFields();\n    }\n    else {\n        return undefined;\n    }\n}\nfunction addResolveFunctionsToSchema(schema, resolveFunctions) {\n    Object.keys(resolveFunctions).forEach(function (typeName) {\n        var type = schema.getType(typeName);\n        if (!type && typeName !== '__schema') {\n            throw new SchemaError(\"\\\"\" + typeName + \"\\\" defined in resolvers, but not in schema\");\n        }\n        Object.keys(resolveFunctions[typeName]).forEach(function (fieldName) {\n            if (fieldName.startsWith('__')) {\n                // this is for isTypeOf and resolveType and all the other stuff.\n                // TODO require resolveType for unions and interfaces.\n                type[fieldName.substring(2)] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            if (type instanceof graphql_3.GraphQLScalarType) {\n                type[fieldName] = resolveFunctions[typeName][fieldName];\n                return;\n            }\n            var fields = getFieldsForType(type);\n            if (!fields) {\n                throw new SchemaError(typeName + \" was defined in resolvers, but it's not an object\");\n            }\n            if (!fields[fieldName]) {\n                throw new SchemaError(typeName + \".\" + fieldName + \" defined in resolvers, but not in schema\");\n            }\n            var field = fields[fieldName];\n            var fieldResolve = resolveFunctions[typeName][fieldName];\n            if (typeof fieldResolve === 'function') {\n                // for convenience. Allows shorter syntax in resolver definition file\n                setFieldProperties(field, { resolve: fieldResolve });\n            }\n            else {\n                if (typeof fieldResolve !== 'object') {\n                    throw new SchemaError(\"Resolver \" + typeName + \".\" + fieldName + \" must be object or function\");\n                }\n                setFieldProperties(field, fieldResolve);\n            }\n        });\n    });\n}\nexports.addResolveFunctionsToSchema = addResolveFunctionsToSchema;\nfunction setFieldProperties(field, propertiesObj) {\n    Object.keys(propertiesObj).forEach(function (propertyName) {\n        field[propertyName] = propertiesObj[propertyName];\n    });\n}\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n    if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }\n    var _a = resolverValidationOptions.requireResolversForArgs, requireResolversForArgs = _a === void 0 ? false : _a, _b = resolverValidationOptions.requireResolversForNonScalar, requireResolversForNonScalar = _b === void 0 ? false : _b, _c = resolverValidationOptions.requireResolversForAllFields, requireResolversForAllFields = _c === void 0 ? false : _c;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        // requires a resolve function for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that returns a non-scalar type\n        if (requireResolversForNonScalar && !(graphql_3.getNamedType(field.type) instanceof graphql_3.GraphQLScalarType)) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n    });\n}\nexports.assertResolveFunctionsPresent = assertResolveFunctionsPresent;\nfunction expectResolveFunction(field, typeName, fieldName) {\n    if (!field.resolve) {\n        // tslint:disable-next-line: max-line-length\n        console.warn(\"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n    }\n}\nfunction addErrorLoggingToSchema(schema, logger) {\n    if (!logger) {\n        throw new Error('Must provide a logger');\n    }\n    if (typeof logger.log !== 'function') {\n        throw new Error('Logger.log must be a function');\n    }\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateWithLogger(field.resolve, logger, errorHint);\n    });\n}\nexports.addErrorLoggingToSchema = addErrorLoggingToSchema;\n// XXX badly named function. this doesn't really wrap, it just chains resolvers...\nfunction wrapResolver(innerResolver, outerResolver) {\n    return function (obj, args, ctx, info) {\n        return Promise.resolve(outerResolver(obj, args, ctx, info)).then(function (root) {\n            if (innerResolver) {\n                return innerResolver(root, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(root, args, ctx, info);\n        });\n    };\n}\nfunction chainResolvers(resolvers) {\n    return function (root, args, ctx, info) {\n        return resolvers.reduce(function (prev, curResolver) {\n            if (curResolver) {\n                return curResolver(prev, args, ctx, info);\n            }\n            return graphql_1.defaultFieldResolver(prev, args, ctx, info);\n        }, root);\n    };\n}\nexports.chainResolvers = chainResolvers;\n/*\n * fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message\n */\nfunction decorateWithLogger(fn, logger, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    var logError = function (e) {\n        // TODO: clone the error properly\n        var newE = new Error();\n        newE.stack = e.stack;\n        /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */\n        if (hint) {\n            newE['originalMessage'] = e.message;\n            newE['message'] = \"Error in resolver \" + hint + \"\\n\" + e.message;\n        }\n        logger.log(newE);\n    };\n    return function (root, args, ctx, info) {\n        try {\n            var result = fn(root, args, ctx, info);\n            // If the resolve function returns a Promise log any Promise rejects.\n            if (result && typeof result.then === 'function' && typeof result.catch === 'function') {\n                result.catch(function (reason) {\n                    // make sure that it's an error we're logging.\n                    var error = reason instanceof Error ? reason : new Error(reason);\n                    logError(error);\n                    // We don't want to leave an unhandled exception so pass on error.\n                    return reason;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            logError(e);\n            // we want to pass on the error, just in case.\n            throw e;\n        }\n    };\n}\nfunction addCatchUndefinedToSchema(schema) {\n    forEachField(schema, function (field, typeName, fieldName) {\n        var errorHint = typeName + \".\" + fieldName;\n        field.resolve = decorateToCatchUndefined(field.resolve, errorHint);\n    });\n}\nexports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;\nfunction decorateToCatchUndefined(fn, hint) {\n    if (typeof fn === 'undefined') {\n        fn = graphql_1.defaultFieldResolver;\n    }\n    return function (root, args, ctx, info) {\n        var result = fn(root, args, ctx, info);\n        if (typeof result === 'undefined') {\n            throw new Error(\"Resolve function for \\\"\" + hint + \"\\\" returned undefined\");\n        }\n        return result;\n    };\n}\n// XXX this function only works for resolvers\n// XXX very hacky way to remember if the function\n// already ran for this request. This will only work\n// if people don't actually cache the operation.\n// if they do cache the operation, they will have to\n// manually remove the __runAtMostOnce before every request.\nfunction runAtMostOncePerRequest(fn) {\n    var value;\n    var randomNumber = Math.random();\n    return function (root, args, ctx, info) {\n        if (!info.operation['__runAtMostOnce']) {\n            info.operation['__runAtMostOnce'] = {};\n        }\n        if (!info.operation['__runAtMostOnce'][randomNumber]) {\n            info.operation['__runAtMostOnce'][randomNumber] = true;\n            value = fn(root, args, ctx, info);\n        }\n        return value;\n    };\n}\n//# sourceMappingURL=schemaGenerator.js.map"},"lineCount":435}},"hash":"7a8fb2adf84e74fffbd539685175b4a4","cacheData":{"env":{}}}