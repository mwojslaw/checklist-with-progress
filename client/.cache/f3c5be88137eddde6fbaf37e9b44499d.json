{"dependencies":[{"name":"../../error","loc":{"line":9,"column":21}},{"name":"../../jsutils/suggestionList","loc":{"line":11,"column":30}},{"name":"../../jsutils/quotedOrList","loc":{"line":15,"column":28}},{"name":"../../type/definition","loc":{"line":19,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}","map":{"mappings":[{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}}],"sources":{"node_modules/apollo-test-utils/node_modules/graphql/validation/rules/FieldsOnCorrectType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}"},"lineCount":122}},"hash":"d8f8aee05307e93f82fccb8c949f0011","cacheData":{"env":{}}}